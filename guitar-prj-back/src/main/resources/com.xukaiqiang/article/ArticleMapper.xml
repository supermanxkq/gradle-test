<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xukaiqiang.blog.article.mapper.ArticleMapper">
	<resultMap type="com.xukaiqiang.blog.model.article.Article" id="articleResultMap">
		<result property="id" column="id" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createTime" column="createTime" />
		<result property="userId" column="userId" />
		<result property="status" column="status" />
		<result property="typeId" column="typeId" />
		<result property="type" column="type" />
		<result property="tags" column="tags" />
		<result property="isTop" column="isTop" />
		<result property="summary" column="summary" />
	</resultMap>
	<resultMap type="com.xukaiqiang.blog.vo.article.QueryArticleListVo" id="articleVoResultMap">
		<result property="id" column="id" />
		<result property="title" column="title" />
		<result property="content" column="content" />
		<result property="createTime" column="createTime" />
		<result property="userName" column="userName" />
		<result property="status" column="status" />
		<result property="typeName" column="typeName" />
		<result property="type" column="type" />
		<result property="tags" column="tags" />
		<result property="isTop" column="isTop" />
		<result property="summary" column="summary" />
	</resultMap>
	
	<sql id="table_columns">
		id,
		title,
		content,
		createTime,
		userId,
		status,
		typeId,
		type,
		tags,
		isTop,
		summary
    </sql>
	<sql id="entity_properties">
		#{id},
		#{title},
		#{content},
		#{createTime},
		#{userId},
		#{status},
		#{typeId},
		#{type},
		#{tags},
		#{isTop},
		#{summary}
	</sql>
	<sql id="batch_entity_properties">
		#{item.id},
		#{item.title},
		#{item.content},
		#{item.createTime},
		#{item.userId},
		#{item.status},
		#{item.typeId},
		#{item.type},
		#{item.tags},
		#{item.isTop},
		#{item.summary}
	</sql>
	
	<!-- 适用于主键自增类型 -->
	<insert id="insert" parameterType="com.xukaiqiang.blog.model.article.Article" useGeneratedKeys="true" keyProperty="id">
		insert into article( <include refid="table_columns" /> ) 
		values ( <include refid="entity_properties" /> )
	</insert>
	
	<!-- 批量添加 适用于主键自增类型  不支持返回主键-->
	<insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true">
		insert into article( <include refid="table_columns" /> ) 
		values 
		<foreach item="item" collection="list" separator="," >
			( <include refid="entity_properties" /> )
		</foreach>
	</insert>
	
	<!--根据主键删除 -->
	<delete id="deleteById">
		delete from article
		where id = #{id}
	</delete>
	
	<!-- 根据ID批量删除 -->
	<delete id="deleteByIds">
		delete from article
		where id in
		<foreach item="item" collection="array" open="(" separator="," close=")">
			#{item}
		</foreach>
	</delete>
	
	<update id="update" parameterType="com.xukaiqiang.blog.model.article.Article">
		update article 
		<trim prefix="set" suffixOverrides=",">
			<if test="title != null and title != ''">title = #{title},</if>
			<if test="content != null and content != ''">content = #{content},</if>
			<if test="createTime != null and createTime != ''">createTime = #{createTime},</if>
			<if test="userId != null and userId != ''">userId = #{userId},</if>
			<if test="status != null and status != ''">status = #{status},</if>
			<if test="typeId != null and typeId != ''">typeId = #{typeId},</if>
			<if test="type != null and type != ''">type = #{type},</if>
			<if test="tags != null and tags != ''">tags = #{tags},</if>
			<if test="isTop != null">isTop = #{isTop},</if>
			<if test="summary != null and summary != ''">summary = #{summary},</if>
		</trim>
		<where>id = #{id}</where>
	</update>
	
	<select id="findById" resultMap="articleResultMap" parameterType="String" >
		select <include refid="table_columns" />
		from article
		where id = #{id}
	</select>
	
	<select id="queryAll" resultMap="articleResultMap">
		select <include refid="table_columns" /> 
		from article
	</select>
	
	<!-- 使用like用法：columnName like concat('%',#columnName#,'%') -->
	<sql id="page_where">
		<trim prefix="where" prefixOverrides="and | or ">
			<if test="title != null and title != ''">and title = #{title}</if>
			<if test="content != null and content != ''">and content = #{content}</if>
			<if test="createTime != null and createTime != ''">and createTime = #{createTime}</if>
			<if test="userId != null and userId != ''">and userId = #{userId}</if>
			<if test="status != null and status != ''">and status = #{status}</if>
			<if test="typeId != null and typeId != ''">and typeId = #{typeId}</if>
			<if test="type != null and type != ''">and type = #{type}</if>
			<if test="tags != null and tags != ''">and tags = #{tags}</if>
			<if test="isTop != null and isTop != ''">and isTop = #{isTop}</if>
			<if test="summary != null and summary != ''">and summary = #{summary}</if>
		</trim>
	</sql>
	
	<select id="page" resultMap="articleResultMap" parameterType="com.xukaiqiang.blog.model.article.Article">
		select <include refid="table_columns" />
		from article
		<include refid="page_where" />
		limit #{firstIndex},#{pageSize}
	</select>
	
	<select id="pageCount" resultType="int" parameterType="com.xukaiqiang.blog.model.article.Article">
		select count(id) from article
		<include refid="page_where" />
	</select>
	
	<!-- 其他自定义SQL -->
	
	<select id="queryArticleList" resultMap="articleVoResultMap" parameterType="com.xukaiqiang.blog.vo.article.QueryArticleListVo">
			SELECT  a.id id,a.title title,a.tags tags,a.isTop isTop,a.type,a.createTime createTime,u.userName userName,a.`status` status,`at`.`name` typeName  FROM  article  a LEFT  JOIN 
			`user` u ON  a.userId=u.id
			LEFT JOIN article_type at on a.typeId=`at`.id
			ORDER BY a.isTop DESC, a.createTime desc
			limit #{firstIndex},#{pageSize}
	</select>
	<select id="pageCountArticle" resultType="int" parameterType="com.xukaiqiang.blog.vo.article.QueryArticleListVo">
		select count(id) from article
	</select>
	<!-- 根据编号进行删除 -->
	<delete id="deleteByTypeId" parameterType="int">
		  delete from  article 
		  where  typeId=#{typeId}
	</delete>
	<!-- 根据文章类型编号查询文章编号 -->
	<select id="findIdByTypeId" parameterType="int" resultType="int">
		  select a.id   from  article a
		  where  a.typeId=#{typeId}
	</select>
</mapper>